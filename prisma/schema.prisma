// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          Role      @default(FAN)
  isVerified    Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts Account[]
  sessions Session[]
  
  // Fan relationships
  bookings     Booking[]
  reviews      Review[]
  
  // Celebrity relationships
  celebrity    Celebrity?
  
  // Verification tokens
  verificationTokens VerificationToken[]
}

model VerificationToken {
  id        String   @id @default(cuid())
  email     String
  token     String   @unique
  type      TokenType
  expires   DateTime
  createdAt DateTime @default(now())
  
  user      User     @relation(fields: [email], references: [email], onDelete: Cascade)

  @@unique([email, token])
}

model Celebrity {
  id          String   @id @default(cuid())
  userId      String   @unique
  bio         String?
  category    String
  price       Float
  isActive    Boolean  @default(true)
  rating      Float    @default(0)
  totalReviews Int     @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  bookings    Booking[]
  reviews     Review[]
}

model Booking {
  id          String        @id @default(cuid())
  fanId       String
  celebrityId String
  message     String
  occasion    String
  status      BookingStatus @default(PENDING)
  price       Float
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  fan         User      @relation(fields: [fanId], references: [id])
  celebrity   Celebrity @relation(fields: [celebrityId], references: [id])
  review      Review?
}

model Review {
  id        String   @id @default(cuid())
  bookingId String   @unique
  fanId     String
  celebrityId String
  rating    Int
  comment   String?
  createdAt DateTime @default(now())

  booking   Booking   @relation(fields: [bookingId], references: [id])
  fan       User      @relation(fields: [fanId], references: [id])
  celebrity Celebrity @relation(fields: [celebrityId], references: [id])
}

enum Role {
  FAN
  CELEBRITY
  ADMIN
}

enum TokenType {
  EMAIL_VERIFICATION
  PASSWORD_RESET
}

enum BookingStatus {
  PENDING
  ACCEPTED
  COMPLETED
  CANCELLED
  REFUNDED
}