generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          Role      @default(FAN)
  isVerified    Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts Account[]
  sessions Session[]

  // Celebrity specific fields
  celebrity Celebrity?

  // Fan specific fields
  bookings Booking[]
  reviews  Review[]
}

model Celebrity {
  id          String   @id @default(cuid())
  userId      String   @unique
  bio         String?
  category    String?
  price       Float?
  rating      Float?   @default(0)
  totalReviews Int     @default(0)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  bookings Booking[]
  reviews  Review[]
}

model CelebrityApplication {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Personal Information
  fullName     String
  email        String    @unique
  phone        String
  dateOfBirth  String
  nationality  String

  // Professional Information
  profession   String
  category     String
  experience   String    @db.Text
  achievements String    @db.Text

  // Social Media
  instagramHandle   String?
  twitterHandle     String?
  tiktokHandle      String?
  youtubeHandle     String?
  otherSocialMedia  String?
  followerCount     String

  // Pricing
  basePrice  Float
  rushPrice  Float

  // Additional Info
  languages        String[]
  availability     String
  specialRequests  String?   @db.Text
  motivation       String    @db.Text

  // Documents
  hasProfilePhoto          Boolean @default(false)
  hasIdDocument           Boolean @default(false)
  hasVerificationDocument Boolean @default(false)
  profilePhotoUrl         String?
  idDocumentUrl          String?
  verificationDocumentUrl String?

  // Application Status
  status        ApplicationStatus @default(PENDING)
  reviewNotes   String?          @db.Text
  reviewedAt    DateTime?
  reviewedBy    String?

  @@map("celebrity_applications")
}

model Booking {
  id          String        @id @default(cuid())
  userId      String
  celebrityId String
  message     String
  occasion    String?
  status      BookingStatus @default(PENDING)
  price       Float
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  celebrity Celebrity @relation(fields: [celebrityId], references: [id], onDelete: Cascade)
  reviews   Review[]
}

model Review {
  id          String   @id @default(cuid())
  userId      String
  celebrityId String
  bookingId   String?
  rating      Int
  comment     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  celebrity Celebrity  @relation(fields: [celebrityId], references: [id], onDelete: Cascade)
  booking   Booking?   @relation(fields: [bookingId], references: [id], onDelete: SetNull)
}

model VerificationToken {
  id         String    @id @default(cuid())
  email      String
  token      String    @unique
  type       TokenType
  expires    DateTime
  createdAt  DateTime  @default(now())
}

enum Role {
  FAN
  CELEBRITY
  ADMIN
}

enum BookingStatus {
  PENDING
  ACCEPTED
  COMPLETED
  CANCELLED
  REFUNDED
}

enum TokenType {
  EMAIL_VERIFICATION
  PASSWORD_RESET
}

enum ApplicationStatus {
  PENDING
  UNDER_REVIEW
  APPROVED
  REJECTED
  REQUIRES_CHANGES
}
